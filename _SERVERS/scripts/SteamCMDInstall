#!/bin/bash
#
# GamePanelX
# Remote scripts v3.0.14
#
# Steam Install Script (for newer SteamCMD)
# Steam(c) is a trademark owned by VALVe Corporation, and is in no way affiliated with GamePanelX.  These are simply scripts to work alongside their provided server tools.
#
# You only need -c to provide the code given by SteamGuard(c).  Turn SteamGuard off on your account to simplify things; you should have a dedicated steam account for this anyways.
#
# Example: ./SteamCMDInstall -g 740 -i 24 -l steamusr22 -p steampass1234 -c aBc3
#
tpl_id=
callback_url=
cback="wget -qO-"
steam_game=
steam_tmp=
steam_login_user=
steam_login_pass=
steam_login_code=
steam_shared_content=
debug_on=

while getopts "i:u:g:l:p:c:d:x:" OPTION
do
     case $OPTION in
	i)
	   	tpl_id=$OPTARG
	   	;;
	u)
		callback_url=$OPTARG
	   	;;
	g)
		steam_game=$OPTARG
		;;
	l)
		steam_login_user=$OPTARG
		;;
	p)
		steam_login_pass=$OPTARG
		;;
	c)
		steam_login_code=$OPTARG
		;;
	d)
		debug_on=$OPTARG
		;;
	x)
		steam_shared_content=$OPTARG
		;;
	?)
		exit
		;;
     esac
done

if [ "$tpl_id" == "" ]
then
	echo "SteamCMDInstall: No template ID provided.  Exiting."
	$cback "$callback_url&do=tpl_status&update=failed" >> /dev/null
	exit
elif [ "$steam_game" == "" ]
then
	echo "SteamCMDInstall: No Steam app ID (-g) provided.  Exiting."
	$cback "$callback_url&do=tpl_status&update=failed" >> /dev/null
        exit
elif [[ "$steam_login_user" && "$steam_login_pass" == "" ]]
then
	# Don't care about user since they can always try anon.
	echo "SteamCMDInstall: No Steam password provided!"
        $cback "$callback_url&do=tpl_status&update=failed" >> /dev/null
        exit
fi

echo "Steam SC = $steam_shared_content"

# Get to the right directory
steam_tmp=$HOME/tmp/$tpl_id
if [ ! -d $steam_tmp ]
then
        mkdir -p $steam_tmp
else
        rm -fr $steam_tmp
        mkdir -p $steam_tmp
fi

# Move to steam path
cd $steam_tmp

################################

# Begin SteamCMD install/update
. $HOME/scripts/SteamCMDFunctions
steamcmd_update $steam_game

#################################

# Fork the checking on installation status, once done start template creation
while [ true ]
do
        # Check completed
        if [ "$(grep 'fully installed.' $steamcmd_log)" ]
        then
		# Remove update script so clients dont have our steam details
		# rm -f $steam_tmp/.gpxsteamupdate.txt

		# Give path without $HOME, since CreateTemplate adds $HOME to what we give it
                this_path="tmp/$tpl_id"

                # Done, start template creation process ("success" will output from this so no need to echo again)
                echo "SteamCMDInstall: tpl_create_start" >> $steam_log
                echo "SteamCMDInstall: ($(date)) Beginning template creation process (Path: $this_path, TplID: $tpl_id ..." >> $steam_log

		if [ "$debug_on" ]; then add_debug=" -d yes"; else add_debug=""; fi
		if [ "$steam_shared_content" == "1" ]; then add_sc="-x yes"; else add_sc=""; fi

                $HOME/scripts/CreateTemplate -p $this_path -i $tpl_id -s yes -u "$callback_url" $add_debug $add_sc

                break
                exit
	# Check Error (e.g. "Error! App '232330' state is 0x10502 after update job.")
        elif [ "$(tail $steamcmd_log -n5 | grep -E 'state is (0x[0-9]+) after update job.')" ]
        then
                # failed_info="$(grep 'state is 0x10502 after update job' $steamcmd_log)"
                echo "SteamCMDInstall: Steam error (state is 0x10502 after update job), retrying install ..." >> $steam_log

                # This seems to be a SteamCMD bug, but the Valve docs mention retrying with force_install_dir as a workaround. 
                # See: https://developer.valvesoftware.com/wiki/Counter-Strike:_Global_Offensive_Dedicated_Servers_Known_Issues#Updating.2FDownloading_CS:GO_Dedicated_server
                steamcmd_update $steam_game

	# Check failed
	elif [ "$(grep 'Failed' $steamcmd_log | grep -v 'Assertion Failed: m_unRequestsOutstanding')" ]
	then
		failed_info="$(grep 'Failed' $steamcmd_log)"

		echo "SteamCMDInstall: Steam install failed ($failed_info)" >> $steam_log
        	$cback "$callback_url&do=tpl_status&update=failed" >> /dev/null
        	exit

        # Not complete.  Update callback with steam install percentage every x seconds
        else
                # (this expects a modern `grep` which can handle basic regex)
                if [ "$callback_url" ]
                then
			cur_perc=$(tail $steamcmd_log | awk '{print $6}' | grep '[0-9]\.[0-9]' | tail -1)

                        if [ "$last_perc" != "$cur_perc" ]
                        then
                                last_perc=$cur_perc
                                $cback "$callback_url&do=steam_progress&percent=$cur_perc" >> /dev/null
                        fi

                fi
        fi

        sleep 5
done >> /dev/null 2>&1 &
check_tpl_pid=$!

echo "SteamCMDInstall: ($(date)) While loop forked off to PID ($check_tpl_pid)" >> $steam_log

touch .gpxtplcheck.pid
echo $check_tpl_pid > .gpxtplcheck.pid


echo "success"
